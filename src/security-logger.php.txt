<?php
/**
 * Sistema de registro de eventos de seguridad
 * Este archivo maneja el registro de intentos de violación de seguridad
 */

// Habilitar la visualización de errores para depuración (quita esto en producción)
ini_set('display_errors', 1);
error_reporting(E_ALL);

// Configuración de rutas
$base_dir = __DIR__; // Usa la ruta absoluta del directorio actual
$log_dir = $base_dir . '/logs';
$log_file = $log_dir . '/security_log.txt';

// Crear directorio de logs si no existe
if (!file_exists($log_dir)) {
    // Intentar crear directorio con permisos completos para depuración
    $success = @mkdir($log_dir, 0777, true);
    
    if (!$success) {
        // Registrar error en el log del sistema si no se puede crear el directorio
        error_log("Error al crear directorio de logs: " . $log_dir);
        
        // Usar un directorio alternativo si el principal falla
        $log_dir = sys_get_temp_dir() . '/security_logs';
        $log_file = $log_dir . '/security_log.txt';
        
        if (!file_exists($log_dir)) {
            @mkdir($log_dir, 0777, true);
        }
    }
}

// Verificar si podemos escribir en el directorio de logs
if (!is_writable($log_dir) && file_exists($log_dir)) {
    // Intentar cambiar permisos
    @chmod($log_dir, 0777);
}

/**
 * Registra un evento de seguridad en el archivo de log
 * 
 * @param string $action Acción que intentó realizar el usuario
 * @param int $level Nivel de seguridad aplicado (0-3)
 * @param int $attempts Número de intentos acumulados
 * @param int $blockDuration Duración del bloqueo en segundos (si aplica)
 * @return bool Éxito o fracaso al registrar
 */
function logSecurityEvent($action, $level = -1, $attempts = 0, $blockDuration = 0) {
    global $log_file, $log_dir;
    
    // Obtener información del cliente
    $ip = $_SERVER['REMOTE_ADDR'] ?? 'Unknown';
    $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? 'Unknown';
    $referer = $_SERVER['HTTP_REFERER'] ?? 'Direct access';
    $requestUri = $_SERVER['REQUEST_URI'] ?? 'Unknown';
    
    // Obtener fecha y hora actual
    $date = date('Y-m-d H:i:s');
    
    // Determinar el tipo de navegador
    $browser = getBrowserInfo($userAgent);
    
    // Formatear el mensaje de log
    $logMessage = sprintf(
        "[%s] IP: %s | Action: %s | Attempts: %d | Level: %s | Duration: %s | Browser: %s | URI: %s | Referer: %s\n",
        $date,
        $ip,
        $action,
        $attempts,
        ($level >= 0) ? "Level $level" : "Warning",
        ($blockDuration > 0) ? formatBlockDuration($blockDuration) : "N/A",
        $browser,
        $requestUri,
        $referer
    );
    
    // Verificar si el directorio de logs existe antes de escribir
    if (!file_exists($log_dir)) {
        @mkdir($log_dir, 0777, true);
    }
    
    // Intentar escribir en el archivo de log
    $result = @file_put_contents($log_file, $logMessage, FILE_APPEND | LOCK_EX);
    
    // Si falla, intentar escribir en el log del sistema
    if ($result === false) {
        error_log("Security event: $action | Attempts: $attempts | Level: $level");
        return false;
    }
    
    return true;
}

/**
 * Obtiene información del navegador a partir del User Agent
 * 
 * @param string $userAgent User Agent del cliente
 * @return string Información del navegador
 */
function getBrowserInfo($userAgent) {
    if (strpos($userAgent, 'MSIE') !== false || strpos($userAgent, 'Trident') !== false) {
        return 'Internet Explorer';
    } elseif (strpos($userAgent, 'Edge') !== false) {
        return 'Microsoft Edge';
    } elseif (strpos($userAgent, 'Firefox') !== false) {
        return 'Mozilla Firefox';
    } elseif (strpos($userAgent, 'Chrome') !== false && strpos($userAgent, 'Safari') !== false) {
        return 'Google Chrome';
    } elseif (strpos($userAgent, 'Safari') !== false) {
        return 'Safari';
    } elseif (strpos($userAgent, 'Opera') !== false || strpos($userAgent, 'OPR') !== false) {
        return 'Opera';
    } else {
        return $userAgent;
    }
}

/**
 * Formatea la duración del bloqueo en un formato legible
 * 
 * @param int $seconds Duración en segundos
 * @return string Duración formateada
 */
function formatBlockDuration($seconds) {
    if ($seconds < 60) {
        return "$seconds segundos";
    } elseif ($seconds < 3600) {
        $minutes = floor($seconds / 60);
        return "$minutes minutos";
    } else {
        $hours = floor($seconds / 3600);
        $minutes = floor(($seconds % 3600) / 60);
        return "$hours horas, $minutes minutos";
    }
}

// Función para obtener información de depuración
function getDebugInfo() {
    global $log_dir, $log_file;
    
    $info = [
        'script_dir' => __DIR__,
        'log_dir' => $log_dir,
        'log_file' => $log_file,
        'log_dir_exists' => file_exists($log_dir) ? 'Yes' : 'No',
        'log_dir_writable' => is_writable($log_dir) ? 'Yes' : 'No',
        'log_file_exists' => file_exists($log_file) ? 'Yes' : 'No',
        'log_file_writable' => file_exists($log_file) && is_writable($log_file) ? 'Yes' : 'No',
        'php_version' => PHP_VERSION,
        'server_software' => $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown',
        'os' => PHP_OS,
        'user' => function_exists('posix_getpwuid') ? posix_getpwuid(posix_geteuid())['name'] : 'Unknown'
    ];
    
    return $info;
}

/**
 * Endpoint para recibir eventos de seguridad desde JavaScript
 */
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Verificar si se solicita información de depuración
    if (isset($_POST['debug']) && $_POST['debug'] === 'true') {
        header('Content-Type: application/json');
        echo json_encode(getDebugInfo());
        exit;
    }
    
    // Procesar evento de seguridad
    if (isset($_POST['action'])) {
        $action = $_POST['action'] ?? 'unknown';
        $level = isset($_POST['level']) ? intval($_POST['level']) : -1;
        $attempts = isset($_POST['attempts']) ? intval($_POST['attempts']) : 0;
        $blockDuration = isset($_POST['duration']) ? intval($_POST['duration']) : 0;
        
        $success = logSecurityEvent($action, $level, $attempts, $blockDuration);
        
        // Responder con JSON
        header('Content-Type: application/json');
        echo json_encode([
            'success' => $success,
            'file' => $log_file,
            'dir_exists' => file_exists($log_dir),
            'file_exists' => file_exists($log_file)
        ]);
        exit;
    }
}

// Si se accede directamente al script, mostrar página de diagnóstico
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    $testSuccess = false;
    $testMessage = '';
    
    // Ejecutar prueba de escritura
    if (isset($_GET['test']) && $_GET['test'] === 'write') {
        $testAction = 'test_write';
        $testSuccess = logSecurityEvent($testAction, 0, 1, 10);
        $testMessage = $testSuccess 
            ? "Prueba exitosa. Log escrito en: $log_file" 
            : "Error al escribir en el log. Verifica los permisos.";
    }
    
    // Mostrar página HTML de diagnóstico
    header('Content-Type: text/html; charset=utf-8');
    
    $debugInfo = getDebugInfo();
    echo '<!DOCTYPE html>
    <html>
    <head>
        <title>Diagnóstico de Security Logger</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
            h1 { color: #333; }
            .success { color: green; }
            .error { color: red; }
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            .actions { margin: 20px 0; }
        </style>
    </head>
    <body>
        <h1>Diagnóstico de Security Logger</h1>';
        
    if ($testMessage) {
        echo '<div class="' . ($testSuccess ? 'success' : 'error') . '">' . $testMessage . '</div>';
    }
    
    echo '<div class="actions">
            <a href="?test=write">Probar escritura</a>
        </div>
        
        <h2>Información del Sistema</h2>
        <table>
            <tr><th>Parámetro</th><th>Valor</th></tr>';
    
    foreach ($debugInfo as $key => $value) {
        echo "<tr><td>$key</td><td>$value</td></tr>";
    }
    
    echo '</table>';
    
    // Mostrar contenido del log si existe
    if (file_exists($log_file)) {
        echo '<h2>Últimas entradas del Log</h2>';
        
        $logContent = file_get_contents($log_file);
        $lines = array_slice(explode("\n", $logContent), -10);
        
        echo '<pre>';
        foreach ($lines as $line) {
            if (!empty(trim($line))) {
                echo htmlspecialchars($line) . "\n";
            }
        }
        echo '</pre>';
    }
    
    echo '</body></html>';
    exit;
}
?>
